{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-web-mini-project"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/To merge user and expense')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_sql_user",
								"type": "DatasetReference"
							},
							"name": "UserData"
						},
						{
							"dataset": {
								"referenceName": "DS_sql",
								"type": "DatasetReference"
							},
							"name": "ExpenseData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ModifiedSQL",
								"type": "DatasetReference"
							},
							"name": "MoveModifiedData"
						}
					],
					"transformations": [
						{
							"name": "UsersExpenseData"
						},
						{
							"name": "SortedData"
						},
						{
							"name": "SelectNeededData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          userid as string,",
						"          name as string,",
						"          mobileNo as string,",
						"          age as integer,",
						"          monthlyRevenue as double,",
						"          password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserData",
						"source(output(",
						"          id as integer,",
						"          userId as string,",
						"          category as string,",
						"          amount as double,",
						"          date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExpenseData",
						"UserData, ExpenseData join(UserData@userid == ExpenseData@userId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> UsersExpenseData",
						"UsersExpenseData sort(asc(UserData@id, true)) ~> SortedData",
						"SortedData select(mapColumn(",
						"          id = UserData@id,",
						"          name,",
						"          mobileNo,",
						"          age,",
						"          monthlyRevenue,",
						"          id = ExpenseData@id,",
						"          category,",
						"          amount,",
						"          date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNeededData",
						"SelectNeededData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MoveModifiedData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_extracted_data_sql",
								"type": "DatasetReference"
							},
							"name": "RawProductData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_extracted_data_to_prep_sql",
								"type": "DatasetReference"
							},
							"name": "MoveToPrep"
						}
					],
					"transformations": [
						{
							"name": "CategoriesDuplicates"
						},
						{
							"name": "FilterDuplicates"
						},
						{
							"name": "SelectRequiredColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          category as string,",
						"          subCategory as string,",
						"          subCategory1 as string,",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as integer,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          directCartType as string,",
						"          priceCheckLessFlag as string,",
						"          minStandardUnitPrice as float,",
						"          maxStandardUnitPrice as float,",
						"          recommendFlag as string,",
						"          iconTypeList as string,",
						"          volumeDiscountFlag as string,",
						"          cValueFlag as string,",
						"          stockItemFlag as string,",
						"          displayStandardPriceFlag as string,",
						"          discontinuedProductFlag as string,",
						"          promptDeliveryFlag as string,",
						"          keywordClickCount as string,",
						"          specialShipmentFlag as string,",
						"          recommendFlagdata as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> RawProductData",
						"RawProductData window(asc(seriesCode, true),",
						"     duplicate = iif(lag(seriesCode)==seriesCode, true(), false())) ~> CategoriesDuplicates",
						"CategoriesDuplicates filter(!duplicate) ~> FilterDuplicates",
						"FilterDuplicates select(mapColumn(",
						"          departmentCode,",
						"          category,",
						"          subCategory,",
						"          subCategory1,",
						"          categoryCode,",
						"          categoryName,",
						"          searchCategoryCode,",
						"          seriesCode,",
						"          seriesName,",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName,",
						"          seriesStatus,",
						"          minStandardDaysToShip,",
						"          maxStandardDaysToShip,",
						"          minPricePerPiece,",
						"          maxPricePerPiece,",
						"          directCartType,",
						"          priceCheckLessFlag,",
						"          minStandardUnitPrice,",
						"          maxStandardUnitPrice,",
						"          recommendFlag,",
						"          volumeDiscountFlag,",
						"          cValueFlag,",
						"          stockItemFlag,",
						"          displayStandardPriceFlag,",
						"          discontinuedProductFlag,",
						"          promptDeliveryFlag,",
						"          keywordClickCount,",
						"          specialShipmentFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MoveToPrep"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessingExtractedData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Extracted Data",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.xlsx",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ExtractedData_xlsx",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_extracted_data_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Extracted Data to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ExtractedData_xlsx",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_extracted_data_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cleaning",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Extracted Data to sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cleaning",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawProductData": {},
									"MoveToPrep": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Extraction script",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {}
					},
					{
						"name": "Move Data To Report",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Cleaning",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_extracted_data_to_prep_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_extractedData_report",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Task1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Report Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Report Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "To merge user and expense",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UserData": {},
									"ExpenseData": {},
									"MoveModifiedData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Task1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/To merge user and expense')]"
			]
		}
	]
}